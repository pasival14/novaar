"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _react = require("react");
var _reactAspectRatio = require("react-aspect-ratio");
var _index = require("../../index");
var _jsxRuntime = require("react/jsx-runtime");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Iframe = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(Iframe, _PureComponent);
  function Iframe(props) {
    var _this;
    _this = _PureComponent.call(this, props) || this;
    _this.state = {
      loaded: false
    };
    return _this;
  }
  Iframe.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.inViewport && !state.loaded) {
      return {
        loaded: true
      };
    }
    return null;
  };
  var _proto = Iframe.prototype;
  _proto.render = function render() {
    var _this$props = this.props,
      src = _this$props.src,
      ratio = _this$props.ratio;
    var Component = this.state.loaded ? 'iframe' : 'div';
    var props = this.state.loaded ? {
      src: src,
      frameBorder: 0
    } : {};
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactAspectRatio.AspectRatio, {
      ratio: ratio,
      style: {
        marginBottom: '200px',
        backgroundColor: 'rgba(0,0,0,.12)'
      },
      ref: this.props.forwardedRef,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, _extends({}, props))
    });
  };
  return Iframe;
}(_react.PureComponent);
var LazyIframe = (0, _index.handleViewport)(Iframe, {}, {
  disconnectOnLeave: true
});
var _default = LazyIframe;
exports["default"] = _default;